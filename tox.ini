[tox]
envlist =
    lint
    {py310,py311}-test
    combine-test-reports
isolated_build = True


[testenv:lint]
description = Run static checkers.
basepython = py310
extras = lint
commands =
    # Check formatting
    ruff format . --check
    # Lint code and docstrings
    ruff check .
    # Check type hinting
    mypy .


[testenv:{py310,py311}-test]
description = Run doc tests and unit tests.
extras = test
setenv =
    PY_IGNORE_IMPORTMISMATCH=1 # https://github.com/pytest-dev/pytest/issues/2042
    COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
    # Run tests and doctests from .py files
    pytest --junitxml=reports/pytest.xml.{envname} {posargs}


[testenv:combine-test-reports]
description = Combine test and coverage data from multiple test runs.
skip_install = true
setenv =
    COVERAGE_FILE = reports/.coverage
depends = {py310,py311}-test
deps =
    junitparser
    coverage[toml]
allowlist_externals = bash
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage html
    bash -c "echo Total coverage: $(coverage report --format=total)"


[testenv:docs]
description = Test and build the docs.
extras = docs
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/build
allowlist_externals = sphinx-build, sphinx-apidoc
deps =
    jinja2
commands =
    # Remove build directory
    python -c 'import shutil; shutil.rmtree("{env:BUILDDIR}", ignore_errors=True);'
    # Delete all files generated by sphinx-apidoc
    python -c 'import glob, os; [os.remove(f) for f in glob.glob("docs/python_ecies*")];'
    # Create dummy files to prevent warnings
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("python_ecies.rst").write_text("");'
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("license_compliance.rst").write_text("");'
    # Run doctests (only from .rst files in docs folder, doctests in .py files are covered by pytest)
    sphinx-build -b doctest -W -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/doctest" {posargs}
    # Autogenerate docs from code
    sphinx-apidoc -f --no-toc -o docs/ src/python_ecies
    # Dump OSS license information into the docs directory
    python {env:DOCSDIR}/_scripts/generate_license_information.py
    # Build the docs
    sphinx-build -b html -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/html" {posargs}


[testenv:build]
description = Build the package.
extras = build
commands =
    # Build the package
    python -m build .
